/*
 * Created on 3 Nov 2017 ( Time 09:39:00 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
// This Bean has a basic Primary Key (not composite) 

package imta.modele.bean.jpa;

import java.io.Serializable;

//import javax.validation.constraints.* ;
//import org.hibernate.validator.constraints.* ;

import java.util.List;

import javax.persistence.*;

/**
 * Cette classe représente un article vendu par l'association.
 */

@Entity
@Table(name="ARTICLE", schema="ADMIN" )
@NamedQueries ( {
  @NamedQuery ( name="ArticleEntity.countAll", query="SELECT COUNT(x) FROM ArticleEntity x" ),
  @NamedQuery ( name="ArticleEntity.deleteAll", query="DELETE FROM ArticleEntity" )
} )
public class ArticleEntity implements Serializable {

    private static final long serialVersionUID = 1L;

    //----------------------------------------------------------------------
    // ENTITY PRIMARY KEY ( BASED ON A SINGLE FIELD )
    //----------------------------------------------------------------------
    /**
     * Code identifiant de l'article (Format [A-Z][1-9], ex: A1)
     */
    @Id
    @Column(name="CODE", nullable=false, length=2)
    private String code;


    //----------------------------------------------------------------------
    // ENTITY DATA FIELDS 
    //----------------------------------------------------------------------
    /**
     * Nom de l'article.
     */
    @Column(name="NOM", nullable=false, length=255)
    private String nom;

    /**
     * Prix de l'article.
     */
    @Column(name="PRIX")
    private Float prix;

    /**
     * Description de l'article.
     */
    @Column(name="DESCRIPTION", nullable=false)
    private String description;

    /**
     * Quantite disponible pour cet article.
     */
    @Column(name="QUANTITE", nullable=false)
    private Integer    quantite     ;



    //----------------------------------------------------------------------
    // ENTITY LINKS ( RELATIONSHIP )
    //----------------------------------------------------------------------
    /**
     * Liste des personnes ayant achete cet article.
     */
    @OneToMany(mappedBy="article2", targetEntity=AchatEntity.class, cascade=CascadeType.REMOVE)
    private List<AchatEntity> listOfAchat ;


    //----------------------------------------------------------------------
    // CONSTRUCTOR(S)
    //----------------------------------------------------------------------
    public ArticleEntity() {
		super();
    }
    
    //----------------------------------------------------------------------
    // GETTER & SETTER FOR THE KEY FIELD
    //----------------------------------------------------------------------
    public void setCode( String code ) {
        this.code = code ;
    }
    public String getCode() {
        return this.code;
    }

    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR FIELDS
    //----------------------------------------------------------------------
    //--- DATABASE MAPPING : NOM ( VARCHAR ) 
    public void setNom( String nom ) {
        this.nom = nom;
    }
    public String getNom() {
        return this.nom;
    }

    //--- DATABASE MAPPING : PRIX ( REAL ) 
    public void setPrix( Float prix ) {
        this.prix = prix;
    }
    public Float getPrix() {
        return this.prix;
    }

    //--- DATABASE MAPPING : DESCRIPTION ( LONG VARCHAR ) 
    public void setDescription( String description ) {
        this.description = description;
    }
    public String getDescription() {
        return this.description;
    }

    //--- DATABASE MAPPING : QUANTITE ( INTEGER ) 
    public void setQuantite( Integer quantite ) {
        this.quantite = quantite;
    }
    public Integer getQuantite() {
        return this.quantite;
    }


    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR LINKS
    //----------------------------------------------------------------------
    public void setListOfAchat( List<AchatEntity> listOfAchat ) {
        this.listOfAchat = listOfAchat;
    }
    public List<AchatEntity> getListOfAchat() {
        return this.listOfAchat;
    }


    //----------------------------------------------------------------------
    // toString METHOD
    //----------------------------------------------------------------------
    public String toString() { 
        StringBuffer sb = new StringBuffer(); 
        sb.append("["); 
        sb.append(code);
        sb.append("]:"); 
        sb.append(nom);
        sb.append("|");
        sb.append(prix);
        // attribute 'description' not usable (type = String Long Text)
        sb.append("|");
        sb.append(quantite);
        return sb.toString(); 
    } 

}
