/*
 * Created on 3 Nov 2017 ( Time 09:39:00 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
// This Bean has a basic Primary Key (not composite) 

package imta.modele.bean.jpa;

import sun.misc.BASE64Encoder;

import java.io.Serializable;

//import javax.validation.constraints.* ;
//import org.hibernate.validator.constraints.* ;

import java.io.UnsupportedEncodingException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.List;
import java.util.Objects;

import javax.persistence.*;

/**
 * Cette classe représente un adhérent de l'association qui a renseigné ses informations.
 */
@Entity
@Table(name="UTILISATEUR", schema="ADMIN" )
// Define named queries here
@NamedQueries ( {
  @NamedQuery ( name="UtilisateurEntity.countAll", query="SELECT COUNT(x) FROM UtilisateurEntity x" ),
  @NamedQuery ( name="UtilisateurEntity.deleteAll", query="DELETE FROM UtilisateurEntity CASCADE" )
} )
public class UtilisateurEntity implements Serializable {

    private static final long serialVersionUID = 1L;
    
    /**
     * Algorithm d'encryption utilise pour encrypter le mot de passe.
     */
    private static String encryptionAlgorithm = "SHA-1";
    
    /**
     * Encodage utilise pour encrypter le mot de passe.
     */
    private static String encryptionEncoding = "UTF-8";

    //----------------------------------------------------------------------
    // ENTITY PRIMARY KEY ( BASED ON A SINGLE FIELD )
    //----------------------------------------------------------------------
    /**
     * Identifiant de l'utilisateur qu'il devra utiliser pour se connecter.
     */
    @Id
    @Column(name="IDENTIFIANT", nullable=false, length=255)
    private String identifiant;


    //----------------------------------------------------------------------
    // ENTITY DATA FIELDS 
    //----------------------------------------------------------------------
    /**
     * Mot de passe de l'utilisateur.
     */
    @Column(name="PASSWORD", nullable=false, length=255)
    private String password;

    /**
     * 
     */
    @Column(name="NOM", nullable=false, length=255)
    private String nom;

    @Column(name="PRENOM", nullable=false, length=255)
    private String     prenom       ;

    @Column(name="ADRESSE")
    private String     adresse      ;

    @Column(name="CITY", length=255)
    private String     city         ;

    @Column(name="CODE_POSTAL", length=64)
    private String     codePostal   ;

    @Column(name="PAYS", length=255)
    private String     pays         ;

    public UtilisateurEntity(String identifiant, String password, String nom, String prenom,
                             String adresse, String city, String codePostal, String pays)
            throws UnsupportedEncodingException, NoSuchAlgorithmException
    {
        this.identifiant = identifiant;
        String encryptedPassword = this.encrypt(password);
        this.password = encryptedPassword;
        this.nom = nom;
        this.prenom = prenom;
        this.adresse = adresse;
        this.city = city;
        this.codePostal = codePostal;
        this.pays = pays;
    }

    //----------------------------------------------------------------------
    // ENTITY LINKS ( RELATIONSHIP )
    //----------------------------------------------------------------------
    @OneToMany(mappedBy="utilisateur2", targetEntity=AchatEntity.class)
    private List<AchatEntity> listOfAchat ;


    //----------------------------------------------------------------------
    // CONSTRUCTOR(S)
    //----------------------------------------------------------------------
    public UtilisateurEntity() {
		super();
    }
    
    //----------------------------------------------------------------------
    // GETTER & SETTER FOR THE KEY FIELD
    //----------------------------------------------------------------------
    public void setIdentifiant( String identifiant ) {
        this.identifiant = identifiant ;
    }
    public String getIdentifiant() {
        return this.identifiant;
    }

    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR FIELDS
    //----------------------------------------------------------------------
    //--- DATABASE MAPPING : PASSWORD ( VARCHAR ) 
    public void setPassword( String password ) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        this.password = this.encrypt(password);
    }

    //--- DATABASE MAPPING : NOM ( VARCHAR ) 
    public void setNom( String nom ) {
        this.nom = nom;
    }
    public String getNom() {
        return this.nom;
    }

    //--- DATABASE MAPPING : PRENOM ( VARCHAR ) 
    public void setPrenom( String prenom ) {
        this.prenom = prenom;
    }
    public String getPrenom() {
        return this.prenom;
    }

    //--- DATABASE MAPPING : ADRESSE ( LONG VARCHAR ) 
    public void setAdresse( String adresse ) {
        this.adresse = adresse;
    }
    public String getAdresse() {
        return this.adresse;
    }

    //--- DATABASE MAPPING : CITY ( VARCHAR ) 
    public void setCity( String city ) {
        this.city = city;
    }
    public String getCity() {
        return this.city;
    }

    //--- DATABASE MAPPING : CODE_POSTAL ( VARCHAR ) 
    public void setCodePostal( String codePostal ) {
        this.codePostal = codePostal;
    }
    public String getCodePostal() {
        return this.codePostal;
    }

    //--- DATABASE MAPPING : PAYS ( VARCHAR ) 
    public void setPays( String pays ) {
        this.pays = pays;
    }
    public String getPays() {
        return this.pays;
    }


    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR LINKS
    //----------------------------------------------------------------------
    public void setListOfAchat( List<AchatEntity> listOfAchat ) {
        this.listOfAchat = listOfAchat;
    }
    public List<AchatEntity> getListOfAchat() {
        return this.listOfAchat;
    }


    //----------------------------------------------------------------------
    // toString METHOD
    //----------------------------------------------------------------------
    public String toString() { 
        StringBuffer sb = new StringBuffer(); 
        sb.append("["); 
        sb.append(identifiant);
        sb.append("]:"); 
        sb.append("|");
        sb.append(nom);
        sb.append("|");
        sb.append(prenom);
        // attribute 'adresse' not usable (type = String Long Text)
        sb.append("|");
        sb.append(city);
        sb.append("|");
        sb.append(codePostal);
        sb.append("|");
        sb.append(pays);
        return sb.toString(); 
    } 

    //----------------------------------------------------------------------
    // Methodes relatives au mot de passe
    //----------------------------------------------------------------------
    /**
     * Encrypt un mot de passe.
     * @param password
     * @return
     * @throws NoSuchAlgorithmException
     * @throws UnsupportedEncodingException
     */
    private String encrypt(String password) throws NoSuchAlgorithmException, UnsupportedEncodingException {
    	MessageDigest md = null;
    	md = MessageDigest.getInstance(UtilisateurEntity.encryptionAlgorithm);
    	md.update(password.getBytes(UtilisateurEntity.encryptionEncoding));
        byte rawByte[] = md.digest();
        String hashedPassword = (new BASE64Encoder()).encode(rawByte);
        
        return hashedPassword;
    }

    /**
     * Vérifie qu'un mot de passe passé, une fois hashé correspond au mot de passe hashé en base de données.
     * @param String passwordToCheck - le mot de passe à vérifier.
     * @return Boolean - true si le mot de passe est correct, false sinon.
     * @throws NoSuchAlgorithmException
     * @throws UnsupportedEncodingException
     */
    public boolean checkPassword(String passwordToCheck) throws NoSuchAlgorithmException, UnsupportedEncodingException {
    	return Objects.equals(this.encrypt(passwordToCheck), this.password);
    }
}
